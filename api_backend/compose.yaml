# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "s--erver".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  db:
    image: postgres
    restart: always
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    user: postgres
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend_api:
    build:
      context: .
    secrets:
      - db-password
    ports:
      - 8080:80

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy


volumes:
 db-data:
secrets:
 db-password:
   file: db/password.txt

# https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/compose.yaml
#  db:
#    image: postgres
#    restart: always
#    environment:
#      - POSTGRES_PASSWORD=mysecretpassword
#      networks:
#        - server-side
#    ports:
#      - 5432:5432
#    volumes:
#      - db-data:/var/lib/postgresql/data